geom_bar() +
facet_wrap(~Target, scales = "free_x") +
```
# Plot contributions for each variable
contribs <- list(assoctns[[1]][[1]], assoctns[[1]][[2]],
assoctns[[1]][[3]], assoctns[[1]][[4]],
assoctns[[1]][[5]])
contribs <- lapply(contribs, function(dat) {
dat$type <- colnames(dat)[1]
colnames(dat)[1] <- "variable"
dat
})
contribs <- do.call(rbind, contribs)
contribs$Target <- rep(1:5, each = 5)
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_bar() +
facet_wrap(~Target, scales = "free_x") +
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_col() +
facet_wrap(~Target, scales = "free_x") +
```
# Plot contributions for each variable
contribs <- list(assoctns[[1]][[1]], assoctns[[1]][[2]],
assoctns[[1]][[3]], assoctns[[1]][[4]],
assoctns[[1]][[5]])
contribs <- lapply(contribs, function(dat) {
dat$type <- colnames(dat)[1]
colnames(dat)[1] <- "variable"
dat
})
contribs <- do.call(rbind, contribs)
contribs$Target <- rep(1:5, each = 5)
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_col() +
facet_wrap(~Target, scales = "free_x") +
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_col() +
facet_wrap(~Target, scales = "free_x")
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_col(fill = 'red') +
facet_wrap(~Target, scales = "free_x")
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_col(fill = 'cyan3', col='black') +
facet_wrap(~Target, scales = "free_x")
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_col(fill = 'cyan3', col='black') +
facet_wrap(~Target, scales = "free_x") + theme_bw()
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_col(fill = 'cyan3', col='black') +
facet_wrap(~Target, scales = "free_x") +
xlab('Target Discrete Variable') +
ylab('Average Contribution') +
theme_bw()
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_col(fill = 'cyan3', col='black') +
facet_wrap(~Target, scales = "free_x") +
xlab('Continuous Variable') +
ylab('Average Contribution') +
ggtitle('Contributions of continuous variables\nto classification of discrete features') +
theme_bw()
ggplot(contribs, aes(variable, Avg_Contrib)) +
geom_col(fill = 'cyan3', col='black') +
facet_wrap(~Target, scales = "free_x",
labeller = as_labeller(c('1' = "Discrete Variable 1",
'2' = "Discrete Variable 2",
'3' = "Discrete Variable 3",
'4' = "Discrete Variable 4",
'5' = "Discrete Variable 5"))) +
xlab('Continuous Variable') +
ylab('Average Contribution') +
ggtitle('Contributions of continuous variables\nto classification of discrete features') +
theme_bw()
# Misclassification rates
for (i in 1:5){
cat('Misclassification rate for target discrete variable',
i, ':', assoctns[[2]][i, 3], '\n')
}
summary(assoctns[[3]][1])
assoctns[[3]][1]
assoctns[[3]][1][unique(unlist(marginal_outliers))]
assoctns[[3]][1]
assoctns[[3]][1][1]
assoctns[[3]][[1]]
assoctns[[3]][[1]][unique(unlist(marginal_outliers))]
# Summary for marginal outliers
summary(assoctns[[3]][[1]][unique(unlist(marginal_outliers))])
# Summary for marginal outliers
summary(assoctns[[3]][[1]][unique(unlist(marginal_outliers))])
# Summary for non-marginal outliers
summary(assoctns[[3]][[1]][-unique(unlist(marginal_outliers))])
kde_classifications <- kde_classif(data = dt,
target_inx = 1
pred_inx = c(6, 7),
kde_classifications <- kde_classif(data = dt,
target_inx = 1,
pred_inx = c(6, 7),
marg_outs = unique(unlist(marginal_outliers)),
Lambda_i = 0,
kernel = "gauss",
alpha_val = 0.3)
kde_classifications$Total_misclassifications
plot(x = seq(1, 20, by =.5), y = kde_classifications[[1]],
type = 'l', lwd = 2, col = 'navy',
xlab = expression(paste(Lambda^*_i)),
plot(x = seq(1, 20, by =.5), y = kde_classifications[[1]],
type = 'l', lwd = 2, col = 'navy',
xlab = expression((Lambda^*_i)),
plot(x = seq(1, 20, by =.5), y = kde_classifications[[1]],
type = 'l', lwd = 2, col = 'navy',
xlab = expression(Lambda[i]~"*"),
ylab = "Misclassified Observations")
plot(x = seq(1, 20, by =.5), y = kde_classifications[[1]],
type = 'l', lwd = 2, col = 'navy',
xlab = expression(Lambda[i]~"*"),
ylab = "Misclassified Observations",
main = "Misclassified observations for varying thresholds")
plot(x = seq(1, 20, by =.5), y = kde_classifications[[1]],
type = 'l', lwd = 2, col = 'navy',
xlab = expression(Lambda[i]~"*"),
ylab = "Misclassified Observations",
main = "Misclassified observations for varying threshold values")
consec_angles(vec = kde_classifications[[1]],
range = seq(1, 20, by = .5),
drop_tol = 3,
range_tol = 21)
cat(expression(Lambda[i]~"* = "~ Lambda_star))
Lambda_star <- consec_angles(vec = kde_classifications[[1]],
range = seq(1, 20, by = .5),
drop_tol = 3,
range_tol = 21)
cat(expression(Lambda[i]~"* = "~ Lambda_star))
cat(expression(Lambda[i]~"* = "))
cat(expression(Lambda[i]~"*"))
print(Lambda_star)
angle <- elbow_angle(vec = kde_classifications[[1]],
range = seq(1, 20, by = .5))
print(angle)
angle <- elbow_angle(vec = kde_classifications[[1]],
range = seq(1, 20, by = .5))
print(angle)
angle <- elbow_angle(vec = kde_classifications[[1]],
range = seq(1, 20, by = .5))
print(angle)
# Use Lambda_star
Lambda_star_inx <- match(Lambda_star, seq(1, 20, by = .5))
Lambda_star_inx
kde_classifications[[2]]
joint_outs_det <- kde_classifications[[2]][[Lambda_star_inx]]
dt[joint_outs_det, ]
summary(dt[joint_outs_det, ])
summary(dt[joint_outs_det, 11])
# Joint outliers detected
joint_outs_det <- kde_classifications[[2]][[Lambda_star_inx]]
print(length(joint_outs_det))
summary(dt[joint_outs_det, ])
joint_outliers <- joint_outs(data = dt,
marg_outs = unique(unlist(marginal_outliers)),
assoc_target = c(1, 2),
assoc_vars = list(c(6, 7), c(6, 7)),
method = "consec_angles",
drop_tol = 3,
range_tol = 21)
joint_outliers
print(length(joint_outliers))
summary(dt[joint_outliers, ])
table(dt[joint_outliers, 11])
library(devtools)
library(DOMID)
library(devtools)
rows <- sample(seq(1000, 2000), 1)
disc_vars <- sample.int(8, 1)
cont_vars <- sample.int(8, 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_var,
n_lvls = 3,
p_outs = 0.05,
jp_outs = 0.2,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.10,
jp_outs = 0,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
rows <- sample(seq(1000, 2000), 1)
disc_vars <- sample.int(8, 1)
cont_vars <- sample.int(8, 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.10,
jp_outs = 0,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
rows <- sample(seq(1000, 2000), 1)
disc_vars <- sample.int(8, 1)
cont_vars <- sample(seq(2, 8), 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.10,
jp_outs = 0,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
test_that("Correct output labels for no joint outliers.", {
expect_equal(length(which(dt[, (disc_vars+cont_vars+1)] == 3)), 0))
length(which(dt[, (disc_vars+cont_vars+1)] == 3))
str(dt)
rows <- sample(seq(1000, 2000), 1)
disc_vars <- sample.int(8, 1)
cont_vars <- sample(seq(2, 8), 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.05,
jp_outs = 0.2,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
disc_vars
cont_vars
class(dt[,c(1:3)])
dt[,c(1:3)]
str(dt[,c(1:3)])
str(dt[,c(1:3)])[,1]
str(dt[,c(1:3)])[1]
str(dt[,c(1:3)])
sapply(dt[,c(1:3)], class)
sapply(dt[,c(1:3)], class)==rep("factor", 3)
all(sapply(dt[,c(1:3)], class))=="factor"
all(sapply(dt[,c(1:3)], class)=="factor")
use_test()
library(testthat)
devtools::load_all(".")
is.numeric('a')
devtools::load_all(".")
devtools::load_all(".")
use_test()
rows <- sample(seq(1000, 1500), 1)
disc_vars <- sample(seq(2, 8), 1)
cont_vars <- sample(seq(3, 8), 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.05,
jp_outs = 0.2,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
disc_vars
disc_cols <- c(1:4)
disc_cols
discrete_scores <- disc_scores(data = dt,
disc_cols = c(1:disc_vars))
discrete_scores[[3]]
rowSums(discrete_scores[[3]])
rowSums(discrete_scores[[3]]) == discrete_scores[[2]][, 2]
all(rowSums(discrete_scores[[3]]) == discrete_scores[[2]][, 2])
library(devtools)
library(DOMID)
library(devtools)
use_test()
rows <- sample(seq(1000, 2000), 1)
disc_vars <- sample.int(8, 1)
cont_vars <- sample(seq(2, 8), 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.05,
jp_outs = 0.2,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
marginal_outliers <- marg_outs(data = dt,
disc_cols = c(1:disc_vars),
cont_cols = c((disc_vars+1):(disc_vars+cont_vars)))
disc_cols
disc_vars
devtools::load_all(".")
marginal_outliers <- marg_outs(data = dt,
disc_cols = c(1:disc_vars),
cont_cols = c((disc_vars+1):(disc_vars+cont_vars)))
MAXLEN
rows <- 1817
disc_vars <- 2
cont_vars <- 4
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.05,
jp_outs = 0.2,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
marginal_outliers <- marg_outs(data = dt,
disc_cols = c(1:disc_vars),
cont_cols = c((disc_vars+1):(disc_vars+cont_vars)))
disc_scores(data = dt, disc_cols = c(1:disc_vars))
disc_vars
dt
disc_cols <- c(1:2)
data = dt
### INPUT CHECKS ###
if (class(data) != "data.frame"){
stop("Data set should be of class 'data.frame'.")
}
for (i in disc_cols){
stopifnot("Discrete variables should be of class 'factor'." = (is.factor(data[, i])))
}
if (length(disc_cols)==1){
data[, disc_cols] <- as.data.frame(data[, disc_cols])
}
### END OF CHECKS ###
# Get all power sets up to length MAXLEN
# For MAXLEN we need to make sure that the threshold value s >= 2
# In order to do that, we take combinations of variables and calculate s
# Until we achieve s < 2
nlevelsvec <- c()
for (i in disc_cols){
nlevelsvec <- c(nlevelsvec, length(levels(data[,i])))
}
nlevelsvec
length(disc_cols)
length(disc_cols)==1
if (length(disc_cols)==1){
MAXLEN <- 1
} else {
for (i in 1:length(disc_cols)){
combs <- prod(sort(nlevelsvec, decreasing = TRUE)[1:i])
s <- floor(as.numeric(nrow(data) * DescTools::MultinomCI(rep(nrow(data)/combs, combs), conf.level=0.99)[1,2]))
if (s < 2){
MAXLEN <- i-1
break
}
}
}
MAXLEN
devtools::load_all(".")
disc_scores(data = dt, disc_cols = c(1:disc_vars))
library(DOMID)
library(devtools)
use_test()
class(as.matrix(dt))
is.data.frame(dt)
is.data.frame(as.matrix(dt))
devtools::load_all(".")
devtools::load_all(".")
use_test()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rows <- sample(seq(1000, 1500), 1)
disc_vars <- sample.int(5, 1)
cont_vars <- sample(seq(2, 8), 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.05,
jp_outs = 0.2,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
discrete_scores <- disc_scores(data = dt, disc_cols = c(1:disc_vars))
continuous_scores <- cont_scores(data = dt, cont_cols = c((disc_vars+1):(disc_vars+cont_vars)))
marginal_outliers <- marg_outs_scores(data = dt,
disc_cols = c(1:disc_vars),
outscorediscdf = discrete_scores[[2]],
outscorecontdf = continuous_scores,
outscorediscdfcells = discrete_scores[[3]])
marg_outs_scores(data = as.matrix(dt, nrow=rows),
disc_cols = c((disc_vars+1):(disc_vars+cont_vars)),
outscorediscdf = discrete_scores[[2]],
outscorecontdf = continuous_scores,
outscorediscdfcells = discrete_scores[[3]])
marg_outs_scores(data = dt,
disc_cols = c((disc_vars+1):(disc_vars+cont_vars)),
outscorediscdf = discrete_scores[[2]],
outscorecontdf = continuous_scores,
outscorediscdfcells = discrete_scores[[3]])
marg_outs_scores(data = dt,
disc_cols = c(1:(disc_vars+1)),
outscorediscdf = discrete_scores[[2]],
outscorecontdf = continuous_scores,
outscorediscdfcells = discrete_scores[[3]])
marg_outs_scores(data = dt,
disc_cols = c(1:(disc_vars)),
outscorediscdf = discrete_scores[[2]],
outscorecontdf = continuous_scores,
outscorediscdfcells = discrete_scores[[3]])
devtools::load_all(".")
as.data.frame(discrete_scores[[2]][,-c(1)])
marg_outs_scores(data = dt,
disc_cols = c(1:(disc_vars)),
outscorediscdf = cbind(discrete_scores[[2]], rnorm(rows)),
outscorecontdf = continuous_scores,
outscorediscdfcells = discrete_scores[[3]])
cbind(discrete_scores[[2]], rnorm(rows))
class(cbind(discrete_scores[[2]], rnorm(rows)))
devtools::load_all(".")
ncol(continuous_scores)
ncol(cbind(continuous_scores, rnorm(rows))
)
use_test()
rows <- sample(seq(1000, 1500), 1)
disc_vars <- sample.int(5, 1)
cont_vars <- sample(seq(2, 8), 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.05,
jp_outs = 0.2,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
discrete_scores <- disc_scores(data = dt, disc_cols = c(1:disc_vars))
continuous_scores <- cont_scores(data = dt, cont_cols = c((disc_vars+1):(disc_vars+cont_vars)))
marginal_outliers <- marg_outs_scores(data = dt,
disc_cols = c(1:disc_vars),
outscorediscdf = discrete_scores[[2]],
outscorecontdf = continuous_scores,
outscorediscdfcells = discrete_scores[[3]])
marginal_outliers <- unique(unlist(marginal_outliers))
assoc_obj <- assoc_detect_xgb(dt, K = 5, pred_inx = c((disc_vars+1):(disc_vars+cont_vars)),
target_inx = c(1:disc_vars),
cont_scores = continuous_scores[,2],
contribs = discrete_scores[[3]],
marg_outs = marginal_outliers)
assoc_obj[[2]]
assoc_obj[[3]]
length(assoc_obj[[3]])
lengths(assoc_obj[[3]])
all(lengths(assoc_obj[[3]])==1277)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_test()
length(seq(1,20, by=.5))
rows <- sample(seq(1000, 1500), 1)
disc_vars <- sample.int(5, 1)
cont_vars <- sample(seq(2, 8), 1)
dt <- gen_marg_joint_data(n_obs = rows,
n_disc = disc_vars,
n_cont = cont_vars,
n_lvls = 3,
p_outs = 0.05,
jp_outs = 0.2,
assoc_target = 1,
assoc_vars = c(1,2),
assoc_type="linear",
seed_num = 1)
discrete_scores <- disc_scores(data = dt, disc_cols = c(1:disc_vars))
continuous_scores <- cont_scores(data = dt, cont_cols = c((disc_vars+1):(disc_vars+cont_vars)))
marginal_outliers <- marg_outs_scores(data = dt,
disc_cols = c(1:disc_vars),
outscorediscdf = discrete_scores[[2]],
outscorecontdf = continuous_scores,
outscorediscdfcells = discrete_scores[[3]])
marginal_outliers <- unique(unlist(marginal_outliers))
kde_classification0 <- kde_classif(data = dt,
target_inx = c(1),
pred_inx = c((disc_vars+1), (disc_vars+2)),
marg_outs = marginal_outliers,
Lambda_i = 0,
kernel = 'gauss',
alpha_val = 0.3)
kde_classification0
length(kde_classification0)
devtools::load_all(".")
kde_classification0[[1]]
kde_classification0[[2]]
length(kde_classification0[[2]])
length(kde_classification0[[1]])
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_test()
use_test()
use_test()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(DOMID)
devtools::load_all(".")
