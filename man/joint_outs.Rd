% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/joint_outs.R
\name{joint_outs}
\alias{joint_outs}
\title{Detect joint outliers given a set of associated features.}
\usage{
joint_outs(
  data,
  marg_outs,
  assoc_target,
  assoc_vars,
  method = "consec_angles",
  drop_tol = 3,
  range_tol = 21
)
}
\arguments{
\item{data}{Data set; should be of class 'data.frame'.}

\item{marg_outs}{Vector of row indices for marginal outliers in the data set. These will be discarded from the data set for detecting the joint outliers. One can set this to be an empty vector in case they provide a data set with no marginal outliers.}

\item{assoc_target}{Indices of target discrete variables associated with sets of continuous features, on which joint outliers will be detected. This can be a single number if only one association exists in the data set, otherwise a vector indicating which discrete variables are associated with some continuous features.}

\item{assoc_vars}{Indices of sets of continuous variables associated with assoc_target. If there only exists one association in the data, this is a vector, otherwise it should be a list of vectors, the list having length equal to length(assoc_target).}

\item{method}{Method used for detecting an optimal Lambda*_i value (see documentation of kde_classif & consec_angles functions); only "consec_angles", "conservative" and "bin" are supported,
corresponding to determining the optimal value using the method of consecutive angles, setting it equal to 3 or equal to 2, respectively.
If multiple associations are present, a vector of methods to be used should be provided for each association, or one method for all associations.
Default is "consec_angles", with candidate values for Lambda*_i ranging from 1 up to 20 with increments of 0.5.}

\item{drop_tol}{Tolerated level of drop in consecutive vec values for which
a drop is not considered significant. The default value is 3 assuming integer values in vec
but this can be modified (see documentation of consec_angles function).
Argument is ignored if method is not "consec_angles".}

\item{range_tol}{Parameter used to restrict the search, so that if the index of the value where
a drop is found exceeds range_tol, the kneedle algorithm is used and the elbow point is
returned instead. Default is 21, corresponding to Lambda*_i = 11 as maximum possible value for the
threshold Lambda_i. Set this to the maximum value of 39 if you don't want such a restriction (see documentation of consec_angles function).
Argument is ignored if method is not "consec_angles".}
}
\value{
Row indices of joint outliers in the provided data set.
}
\description{
This function detects the joint outliers in a data set based on a set of given associations.
The association needs to have been detected prior to using this function, so that the output
is meaningful. Associations are defined between a discrete and a set of continuous variables.
Currently 3 methods are supported, namely the method of consecutive angles, the conservative
method that takes Lambda*_i = 3 and the binary method (used for binary target discrete variables,
upon removal of marginal outliers) which uses Lambda*_i = 2.
}
\examples{
dt <- gen_marg_joint_data(n_obs = 1000, n_disc = 5, n_cont = 5, n_lvls = 3, p_outs = 0.05, jp_outs = 0.2, assoc_target = c(1,2), assoc_vars = list(c(1, 2),c(1,2)), assoc_type = 'linear', seed_num = 1)
discrete_scores <- disc_scores(dt, c(1:5))
continuous_scores <- cont_scores(dt, c(6:10))
marginal_outs <- unique(unlist(marg_outs_scores(data = dt, disc_cols = c(1:5), outscorediscdf = discrete_scores[[2]], outscorecontdf = continuous_scores, outscorediscdfcells = discrete_scores[[3]])))
joint_outs(data = dt, marg_outs = marginal_outs, assoc_target = c(1,2), assoc_vars = list(c(6, 7), c(6,7)), method = 'consec_angles', drop_tol = 3, range_tol = 11)
joint_outs(data = dt, marg_outs = marginal_outs, assoc_target = 1, assoc_vars = c(6, 7), method = 'conservative', drop_tol = 3, range_tol = 11)
}
