% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assoc_detect_xgb.R
\name{assoc_detect_xgb}
\alias{assoc_detect_xgb}
\title{Detection of associations between continuous & discrete features using XGBoost with Stratified K-Fold CV}
\usage{
assoc_detect_xgb(
  data,
  K = 5,
  pred_inx,
  target_inx,
  cont_scores,
  contribs,
  marg_outs
)
}
\arguments{
\item{data}{Data set of mixed-type data on which an XGBoost classifier will be implemented. Should be of class 'data.frame'.}

\item{K}{Number of folds to be used. Default value is 5.}

\item{pred_inx}{Indices of predictors. This will typically be a vector with the column indices of all continuous columns that will be used as predictors, although one can use less continuous columns as well.}

\item{target_inx}{Indices of target columns; should be discrete variables. A small manipulation of the factor levels is done as pre-processing step, as the xgboost function allows levels starting from 0 instead of 1.}

\item{cont_scores}{Continuous scores of outlyingness. These should be provided as a vector of length equal to the number of observations. The scores are used for appropriately weighing the cross entropy loss function and they should be calculated for the continuous variables that are used as predictors.}

\item{contribs}{Contributions of target discrete variable to the discrete scores of outlyingness of each observation. These should be provided as a matrix of dimensions (nrow(data) x length(target_inx)) of class 'data.frame'. These scores are used for appropriately weighing the cross entropy loss function.}

\item{marg_outs}{Vector of marginal outlier row indices. These will be used for appropriately weighing the observations. If empty, every observation will be given equal weight.}
}
\value{
A list of 3 elements. The first elements is a list with length(target_inx) elements, named 'Contributions'. This includes summary statistics for the contribution (importance) of each continuous variable
to the predictive accuracy of the target discrete variables for each of the K folds. The included summary statistics are the Average, Median, Maximum, Minimum and Standard Deviation of the Contributions across all K folds.
The second element is a data frame named 'Misclassifications' which summarises the number of misclassified observations for each target discrete variable, as well as the misclassification rate.
The third element is a list of vectors including the weight assigned to each observation for each target variable.
}
\description{
This function uses the xgboost classifier by the homonymous R package for predicting the levels of
a target discrete feature using all continuous variables of a data set as predictors. Stratified K-Fold
cross validation is used and predictive accuracy results are returned. These can then be used by the
user for determining if an association between the target variable and a set of predictors is present,
while variable importances are also returned so that the user can see the continuous variables that
contribute to this association.
}
\examples{
dt <- gen_marg_joint_data(n_obs = 1000, n_disc = 5, n_cont = 5, n_lvls = 3, p_outs = 0.05, jp_outs = 0.2, assoc_target = 1, assoc_vars = c(1, 2), assoc_type = 'linear', seed_num = 1)
discrete_scores <- disc_scores(dt, c(1:5))
continuous_scores <- cont_scores(dt, c(6:10))
marginal_outs_ <- unique(unlist(marg_outs_scores(data = dt, disc_cols = c(1:5), outscorediscdf = discrete_scores[[2]], outscorecontdf = continuous_scores, outscorediscdfcells = discrete_scores[[3]])))
assoc_detect_xgb(dt, K = 5, pred_inx = c(6:10), target_inx = c(1:5), cont_scores = continuous_scores[,2], contribs = discrete_scores$Contributions, marg_outs = marginal_outs)
assoc_detect_xgb(dt, K = 5, pred_inx = c(6:10), target_inx = c(1), cont_scores = continuous_scores[,2], contribs = as.data.frame(discrete_scores$Contributions[,1]), marg_outs = marginal_outs)
assoc_detect_xgb(dt, K = 3, pred_inx = c(6:10), target_inx = c(1, 3), cont_scores = continuous_scores[,2], contribs = discrete_scores$Contributions[, c(1, 3)], marg_outs = marginal_outs)
}
